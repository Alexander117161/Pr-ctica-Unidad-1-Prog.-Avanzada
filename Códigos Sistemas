#Sistema 1
class Persona:
    def __init__(self, nombre, correo):
        self.nombre = nombre
        self.correo = correo

    def __str__(self):
        return f"{self.nombre} - {self.correo}"

class Usuario(Persona):
    def __init__(self, nombre, correo):
        super().__init__(nombre, correo)
        self.reservas = []

    def hacer_reserva(self, reserva):
        self.reservas.append(reserva)

    def cancelar_reserva(self, reserva):
        if reserva in self.reservas:
            self.reservas.remove(reserva)
            reserva.funcion.sala.asientos_ocupados.difference_update(reserva.asientos)
            print(f"Reserva cancelada para '{reserva.funcion.pelicula.titulo}'.")

class Empleado(Persona):
    def __init__(self, nombre, correo, rol):
        super().__init__(nombre, correo)
        self.rol = rol

    def agregar_funcion(self, pelicula, sala, horario):
        return Funcion(pelicula, sala, horario)

    def agregar_pelicula(self, titulo, duracion, clasificacion, genero):
        return Pelicula(titulo, duracion, clasificacion, genero)

    def agregar_promocion(self, descripcion, descuento, condiciones):
        return Promocion(descripcion, descuento, condiciones)

    def modificar_promocion(self, promocion, nuevo_descuento, nuevas_condiciones):
        promocion.descuento = nuevo_descuento
        promocion.condiciones = nuevas_condiciones
        print(f"Promoción modificada: {nuevo_descuento}% de descuento. {nuevas_condiciones}.")

class Espacio:
    def __init__(self, nombre):
        self.nombre = nombre

class Sala(Espacio):
    def __init__(self, nombre, tipo, capacidad):
        super().__init__(nombre)
        self.tipo = tipo
        self.capacidad = capacidad
        self.asientos_ocupados = set()

    def verificar_disponibilidad(self, cantidad):
        return len(self.asientos_ocupados) + cantidad <= self.capacidad

    def reservar_asientos(self, asientos):
        if self.verificar_disponibilidad(len(asientos)):
            self.asientos_ocupados.update(asientos)
            return True
        return False

class ZonaComida(Espacio):
    def __init__(self, nombre):
        super().__init__(nombre)
        self.productos = {}  # Diccionario con el nombre del producto como clave, y [precio, stock] como valor

    def agregar_producto(self, nombre, precio, stock):
        """Agrega un nuevo producto con precio y stock a la zona de comida."""
        if nombre in self.productos:
            self.productos[nombre][1] += stock  # Aumentar el stock si el producto ya existe
        else:
            self.productos[nombre] = [precio, stock]  # Agregar nuevo producto
        print(f"Producto '{nombre}' agregado a la zona de comida con {stock} unidades.")

    def vender_producto(self, nombre, cantidad):
        """Vende una cantidad específica de un producto."""
        if nombre in self.productos:
            precio, stock = self.productos[nombre]
            if stock >= cantidad:
                self.productos[nombre][1] -= cantidad  # Actualizar el stock
                print(f"Se han vendido {cantidad} unidades de '{nombre}' por ${precio * cantidad}.")
            else:
                print(f"No hay suficiente stock de '{nombre}' para vender {cantidad}.")
        else:
            print(f"Producto '{nombre}' no disponible en la zona de comida.")

    def mostrar_productos(self):
        """Muestra todos los productos disponibles en la zona de comida."""
        if self.productos:
            print("Productos disponibles en la zona de comida:")
            for nombre, (precio, stock) in self.productos.items():
                print(f"{nombre} - ${precio} (Stock: {stock})")
        else:
            print("No hay productos en la zona de comida.")

class Pelicula:
    def __init__(self, titulo, duracion, clasificacion, genero):
        self.titulo = titulo
        self.duracion = duracion
        self.clasificacion = clasificacion
        self.genero = genero

class Promocion:
    def __init__(self, descripcion, descuento, condiciones):
        self.descripcion = descripcion
        self.descuento = descuento
        self.condiciones = condiciones

    def __str__(self):
        return f"{self.descuento}% de descuento. {self.condiciones}"

class Funcion:
    def __init__(self, pelicula, sala, horario):
        self.pelicula = pelicula
        self.sala = sala
        self.horario = horario

class Reserva:
    def __init__(self, usuario, funcion, asientos, promocion=None):
        self.usuario = usuario
        self.funcion = funcion
        self.asientos = asientos
        self.promocion = promocion
        if self.funcion.sala.reservar_asientos(asientos):
            usuario.hacer_reserva(self)
            print(f"Reserva realizada para '{self.funcion.pelicula.titulo}' en la sala {self.funcion.sala.nombre}.")
        else:
            raise ValueError("No hay suficientes asientos disponibles.")

#Ejemplo de uso
if __name__ == "__main__":
    usuario1 = Usuario("José Alexander", "jose.alexander@email.com")
    usuario2 = Usuario("Nicolás Luna", "nicolas.luna@email.com")
    print(f"La persona {usuario1.nombre} ha sido registrada con el correo {usuario1.correo}")
    print(f"La persona {usuario2.nombre} ha sido registrada con el correo {usuario2.correo}")

    empleado1 = Empleado("Francisco Daniel", "francisco.daniel@email.com", "Administrador")
    pelicula1 = empleado1.agregar_pelicula("Matrix", 120, "PG-13", "Ciencia Ficción")
    sala1 = Sala("Sala 1", "IMAX", 100)
    funcion1 = empleado1.agregar_funcion(pelicula1, sala1, "18:00")
    promocion1 = empleado1.agregar_promocion("Descuento especial", 20, "Válido de lunes a jueves")
    print(f"Promoción: {promocion1}")

    zona_comida = ZonaComida("Zona de Snacks")

    zona_comida.agregar_producto("Palomitas", 5, 100)
    zona_comida.agregar_producto("Refresco", 3, 50)

    zona_comida.vender_producto("Palomitas", 10)  # Vende 10 unidades de Palomitas
    zona_comida.vender_producto("Refresco", 5)   # Vende 5 unidades de Refresco

    zona_comida.mostrar_productos()

    reserva1 = Reserva(usuario1, funcion1, [1, 2, 3], promocion1)
    usuario1.cancelar_reserva(reserva1)

    empleado1.modificar_promocion(promocion1, 30, "Válido todos los días antes de las 5 PM")

    print("\nPersonas registradas")
    for persona in [usuario1, usuario2]:
        print(f"-{persona}")





#Sistema 2
class Persona:
    def __init__(self, nombre, correo):
        self.nombre = nombre
        self.correo = correo

class Cliente(Persona):
    def __init__(self, nombre, correo):
        super().__init__(nombre, correo)
        self.historial_pedidos = []
    
    def realizar_pedido(self, pedido):
        self.historial_pedidos.append(pedido)
        print(f"Pedido realizado por {self.nombre}: {pedido}")

class Empleado(Persona):
    def __init__(self, nombre, correo, rol):
        super().__init__(nombre, correo)
        self.rol = rol
    
    def actualizar_inventario(self, inventario, producto, cantidad):
        inventario.actualizar_stock(producto, cantidad)
        print(f"{self.nombre} ha actualizado el inventario con {cantidad} unidades de {producto.nombre}")

class ProductoBase:
    def __init__(self, nombre, precio):
        self.nombre = nombre
        self.precio = precio

class Bebida(ProductoBase):
    def __init__(self, nombre, precio, tamano, tipo, opciones_personalizables=None):
        super().__init__(nombre, precio)
        self.tamano = tamano
        self.tipo = tipo  # caliente o fría
        self.opciones_personalizables = opciones_personalizables or []

    def personalizar(self, opcion):
        self.opciones_personalizables.append(opcion)
        print(f"Bebida personalizada: {self.nombre} con {', '.join(self.opciones_personalizables)}")

class Postre(ProductoBase):
    def __init__(self, nombre, precio, vegano, sin_gluten):
        super().__init__(nombre, precio)
        self.vegano = vegano
        self.sin_gluten = sin_gluten

class Inventario:
    def __init__(self):
        self.stock = {}

    def agregar_producto(self, producto, cantidad):
        if producto.nombre in self.stock:
            self.stock[producto.nombre] += cantidad
        else:
            self.stock[producto.nombre] = cantidad
        print(f"Producto {producto.nombre} agregado al inventario: {cantidad} unidades")

    def verificar_stock(self, producto, cantidad):
        return self.stock.get(producto.nombre, 0) >= cantidad

    def actualizar_stock(self, producto, cantidad):
        if producto.nombre in self.stock:
            self.stock[producto.nombre] -= cantidad
            print(f"Se ha actualizado el inventario, {producto.nombre}: {self.stock[producto.nombre]} unidades restantes.")
        else:
            print(f"No se encuentra {producto.nombre} en el inventario.")

class Pedido:
    def __init__(self, cliente):
        self.cliente = cliente
        self.productos = []
        self.estado = "Pendiente"
        self.total = 0

    def agregar_producto(self, producto, inventario):
        if inventario.verificar_stock(producto, 1):  # Verifica si hay suficiente stock
            self.productos.append(producto)
            self.total += producto.precio
            inventario.actualizar_stock(producto, 1)
            print(f"Producto añadido: {producto.nombre}")
        else:
            print(f"Producto {producto.nombre} no disponible debido a falta de stock.")

    def confirmar_pedido(self):
        self.estado = "En preparación"
        print(f"Pedido confirmado para {self.cliente.nombre}: {self.estado}")
        print(f"Total del pedido: {self.total}")

    def entregar_pedido(self):
        self.estado = "Entregado"
        print(f"Pedido entregado a {self.cliente.nombre}: {self.estado}")

    def __str__(self):
        productos = ", ".join([producto.nombre for producto in self.productos])
        return f"Pedido de {self.cliente.nombre}: {productos} - Total: {self.total} - Estado: {self.estado}"

class Promocion:
    def __init__(self, tipo, descuento):
        self.tipo = tipo  # 'porcentaje' o 'fijo'
        self.descuento = descuento

    def aplicar_descuento(self, pedido):
        if self.tipo == 'porcentaje':
            descuento = pedido.total * (self.descuento / 100)
        elif self.tipo == 'fijo':
            descuento = self.descuento
        else:
            descuento = 0
        pedido.total -= descuento
        print(f"Descuento aplicado: {descuento}. Total final con descuento: {pedido.total}.")

# Ejemplo de uso
cliente1 = Cliente("Alexander", "alexander@example.com")
empleado1 = Empleado("Yahel", "yahel@example.com", "Barista")
inventario = Inventario()

bebida1 = Bebida("Café con leche", 3.5, "Grande", "Caliente")
bebida2 = Bebida("Café helado", 4.0, "Mediano", "Fría")
postre1 = Postre("Tarta de manzana", 2.0, True, False)

inventario.agregar_producto(bebida1, 10)
inventario.agregar_producto(postre1, 5)

pedido1 = Pedido(cliente1)

pedido1.agregar_producto(bebida1, inventario)  # Primera bebida (con ingredientes suficientes)
pedido1.agregar_producto(bebida2, inventario)  # Segunda bebida (sin ingredientes suficientes)
pedido1.agregar_producto(postre1, inventario)

cliente1.realizar_pedido(pedido1)

promocion = Promocion('porcentaje', 10)
promocion.aplicar_descuento(pedido1)

pedido1.confirmar_pedido()
pedido1.entregar_pedido()





#Sistema 3
from datetime import datetime

class Material:
    def __init__(self, titulo, estado='disponible'):
        self.titulo = titulo
        self.estado = estado  # disponible o prestado
    
    def cambiar_estado(self, estado):
        self.estado = estado
        print(f"Estado de {self.titulo} cambiado a: {self.estado}")

    def __str__(self):
        return f"{self.__class__.__name__}: {self.titulo}, Estado: {self.estado}"

class Libro(Material):
    def __init__(self, titulo, autor, genero, estado='disponible'):
        super().__init__(titulo, estado)
        self.autor = autor
        self.genero = genero
    
    def __str__(self):
        return f"Libro: {self.titulo}, Autor: {self.autor}, Género: {self.genero}, Estado: {self.estado}"

class Revista(Material):
    def __init__(self, titulo, edicion, periodicidad, estado='disponible'):
        super().__init__(titulo, estado)
        self.edicion = edicion
        self.periodicidad = periodicidad

    def __str__(self):
        return f"Revista: {self.titulo}, Edición: {self.edicion}, Periodicidad: {self.periodicidad}, Estado: {self.estado}"

class MaterialDigital(Material):
    def __init__(self, titulo, tipo_archivo, enlace_descarga, estado='disponible'):
        super().__init__(titulo, estado)
        self.tipo_archivo = tipo_archivo
        self.enlace_descarga = enlace_descarga

    def __str__(self):
        return f"Material Digital: {self.titulo}, Tipo: {self.tipo_archivo}, Enlace: {self.enlace_descarga}, Estado: {self.estado}"

class Persona:
    def __init__(self, nombre, correo):
        self.nombre = nombre
        self.correo = correo

class Usuario(Persona):
    def __init__(self, nombre, correo):
        super().__init__(nombre, correo)
        self.materiales_prestados = []
    
    def consultar_catalogo(self, catalogo):
        return catalogo.mostrar_materiales()

    def realizar_prestamo(self, prestamo):
        self.materiales_prestados.append(prestamo)
        print(f"{self.nombre} ha realizado un préstamo de {prestamo.material.titulo}.")

    def devolver_material(self, material):
        self.materiales_prestados = [prestamo for prestamo in self.materiales_prestados if prestamo.material != material]
        material.cambiar_estado('disponible')
        print(f"{self.nombre} ha devuelto {material.titulo}.")

class Bibliotecario(Persona):
    def __init__(self, nombre, correo, rol):
        super().__init__(nombre, correo)
        self.rol = rol

    def agregar_material(self, material, sucursal):
        sucursal.agregar_material(material)
        print(f"{self.nombre} ha agregado {material.titulo} a la sucursal.")

    def gestionar_prestamos(self, prestamo):
        print(f"{self.nombre} está gestionando el préstamo de {prestamo.material.titulo}.")

class Sucursal:
    def __init__(self, nombre):
        self.nombre = nombre
        self.catalogo = []

    def agregar_material(self, material):
        self.catalogo.append(material)
        print(f"{material.titulo} ha sido agregado a la sucursal {self.nombre}.")

    def buscar_material(self, criterio, valor):
        resultados = []
        for material in self.catalogo:
            if hasattr(material, criterio) and getattr(material, criterio) == valor:
                resultados.append(material)
        return resultados

    def mostrar_materiales(self):
        return [str(material) for material in self.catalogo]

class Prestamo:
    def __init__(self, usuario, material, fecha_prestamo, fecha_devolucion):
        self.usuario = usuario
        self.material = material
        self.fecha_prestamo = fecha_prestamo
        self.fecha_devolucion = fecha_devolucion

    def calcular_retraso(self, fecha_actual):
        fecha_devolucion = datetime.strptime(self.fecha_devolucion, "%Y-%m-%d")
        fecha_actual = datetime.strptime(fecha_actual, "%Y-%m-%d")
        return (fecha_actual - fecha_devolucion).days

    def es_retrasado(self, fecha_actual):
        return self.calcular_retraso(fecha_actual) > 0

class Penalizacion:
    def __init__(self, usuario, monto):
        self.usuario = usuario
        self.monto = monto
        self.estado = 'pendiente'

    def aplicar_penalizacion(self, prestamo, fecha_actual):
        if prestamo.es_retrasado(fecha_actual):
            self.estado = 'aplicada'
            print(f"Penalización de {self.monto} aplicada a {self.usuario.nombre} por retraso.")
            return self.monto
        return 0

    def pagar_penalizacion(self):
        self.estado = 'pagada'
        print(f"Penalización de {self.monto} pagada por {self.usuario.nombre}.")

class Catalogo:
    def __init__(self):
        self.materiales = []

    def agregar_material(self, material):
        self.materiales.append(material)

    def buscar_por_criterio(self, criterio, valor):
        resultados = [material for material in self.materiales if hasattr(material, criterio) and getattr(material, criterio) == valor]
        return resultados

    def mostrar_materiales(self):
        return [str(material) for material in self.materiales]

# Ejemplo de uso
usuario1 = Usuario("Juan Pérez", "juan.perez@example.com")
bibliotecario1 = Bibliotecario("Carlos Gómez", "carlos.gomez@example.com", "Bibliotecario")
sucursal1 = Sucursal("Sucursal Central")
sucursal2 = Sucursal("Sucursal Norte")

libro1 = Libro("El Quijote", "Miguel de Cervantes", "Novela")
revista1 = Revista("National Geographic", "2023", "Mensual")
material_digital1 = MaterialDigital("Python para todos", "PDF", "http://descargarpython.com")

sucursal1.agregar_material(libro1)
sucursal1.agregar_material(revista1)
sucursal2.agregar_material(material_digital1)

prestamo1 = Prestamo(usuario1, libro1, "2025-02-01", "2025-02-15")
usuario1.realizar_prestamo(prestamo1)

catalogo = Catalogo()
catalogo.agregar_material(libro1)
catalogo.agregar_material(revista1)
catalogo.agregar_material(material_digital1)

print(usuario1.consultar_catalogo(catalogo))

penalizacion1 = Penalizacion(usuario1, 5)
penalizacion1.aplicar_penalizacion(prestamo1, "2025-02-16")

usuario1.devolver_material(libro1)

bibliotecario1.agregar_material(libro1, sucursal2)
